import React, { useState, useEffect } from 'react';
import { FileText, Play, Upload, Download, Save, RotateCcw, Pause, Square } from 'lucide-react';
import { GCodeParser, GCodeCommand } from '../utils/gcodeParser';

interface MachineStatus {
  state: 'idle' | 'running' | 'paused' | 'alarm' | 'offline';
  position: { x: number; y: number; z: number };
  feedRate: number;
  spindleSpeed: number;
  connected: boolean;
  currentLine: number;
  totalLines: number;
  progress: number;
}

interface GCodeEditorProps {
  machineStatus: MachineStatus;
  setMachineStatus: React.Dispatch<React.SetStateAction<MachineStatus>>;
}

const GCodeEditor: React.FC<GCodeEditorProps> = ({ machineStatus, setMachineStatus }) => {
  const [gcode, setGcode] = useState(`; CNC Program - Sample Part
; Generated by CAM Software
; Material: Aluminum
; Tool: 6mm End Mill

G21 ; Set units to mm
G90 ; Absolute positioning
G17 ; XY plane selection
G94 ; Feed rate per minute

; Home and setup
G28 ; Home all axes
G0 Z10 ; Move to safe height
M3 S12000 ; Start spindle at 12000 RPM

; Square pattern
G0 X10 Y10 ; Rapid to start position
G1 Z-2 F500 ; Plunge to cutting depth
G1 X50 F1500 ; Move to X50
G1 Y50 ; Move to Y50
G1 X10 ; Move back to X10
G1 Y10 ; Move back to Y10

; Circle pattern
G0 Z5 ; Retract
G0 X30 Y30 ; Move to circle center
G1 Z-2 F500 ; Plunge
G2 X30 Y30 I10 J0 F800 ; Full circle

; End program
G0 Z10 ; Retract
M5 ; Stop spindle
G28 ; Home
M30 ; Program end`);

  const [parser] = useState(new GCodeParser());
  const [commands, setCommands] = useState<GCodeCommand[]>([]);
  const [isSimulating, setIsSimulating] = useState(false);
  const [simulationSpeed, setSimulationSpeed] = useState(100); // ms between commands

  useEffect(() => {
    const parsedCommands = parser.parseGCode(gcode);
    setCommands(parsedCommands);
    setMachineStatus(prev => ({ ...prev, totalLines: parsedCommands.length }));
  }, [gcode, parser, setMachineStatus]);

  useEffect(() => {
    let interval: NodeJS.Timeout;

    if (isSimulating && machineStatus.state === 'running') {
      interval = setInterval(() => {
        setMachineStatus(prev => {
          if (prev.currentLine >= commands.length - 1) {
            setIsSimulating(false);
            return {
              ...prev,
              state: 'idle',
              progress: 100,
              currentLine: commands.length - 1
            };
          }

          const nextLine = prev.currentLine + 1;
          const command = commands[nextLine];
          
          if (command) {
            const stateChanges = parser.simulateCommand(command);
            const newProgress = ((nextLine + 1) / commands.length) * 100;

            return {
              ...prev,
              currentLine: nextLine,
              progress: newProgress,
              position: stateChanges.position || prev.position,
              feedRate: stateChanges.feedRate || prev.feedRate,
              spindleSpeed: stateChanges.spindleSpeed || prev.spindleSpeed
            };
          }

          return prev;
        });
      }, simulationSpeed);
    }

    return () => {
      if (interval) clearInterval(interval);
    };
  }, [isSimulating, machineStatus.state, commands, parser, simulationSpeed]);

  const handleRunProgram = () => {
    parser.reset();
    setMachineStatus(prev => ({
      ...prev,
      state: 'running',
      currentLine: 0,
      progress: 0,
      position: { x: 0, y: 0, z: 0 }
    }));
    setIsSimulating(true);
  };

  const handlePauseProgram = () => {
    setMachineStatus(prev => ({ ...prev, state: 'paused' }));
  };

  const handleResumeProgram = () => {
    setMachineStatus(prev => ({ ...prev, state: 'running' }));
  };

  const handleStopProgram = () => {
    setIsSimulating(false);
    parser.reset();
    setMachineStatus(prev => ({
      ...prev,
      state: 'idle',
      currentLine: 0,
      progress: 0,
      position: { x: 0, y: 0, z: 0 },
      spindleSpeed: 0
    }));
  };

  const handleLoadFile = () => {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.nc,.gcode,.txt';
    input.onchange = (e) => {
      const file = (e.target as HTMLInputElement).files?.[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = (e) => {
          const content = e.target?.result as string;
          setGcode(content);
        };
        reader.readAsText(file);
      }
    };
    input.click();
  };

  const handleSaveFile = () => {
    const blob = new Blob([gcode], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'program.nc';
    a.click();
    URL.revokeObjectURL(url);
  };

  const lines = gcode.split('\n');

  return (
    <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
      {/* Editor */}
      <div className="lg:col-span-3">
        <div className="bg-gray-800 rounded-lg p-6">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-semibold flex items-center">
              <FileText className="w-5 h-5 mr-2 text-blue-400" />
              G-Code Editor
            </h2>
            
            <div className="flex space-x-2">
              <button
                onClick={handleLoadFile}
                className="bg-blue-600 hover:bg-blue-700 px-3 py-2 rounded-lg text-sm transition-colors flex items-center space-x-2"
              >
                <Upload className="w-4 h-4" />
                <span>Load</span>
              </button>
              
              <button
                onClick={handleSaveFile}
                className="bg-green-600 hover:bg-green-700 px-3 py-2 rounded-lg text-sm transition-colors flex items-center space-x-2"
              >
                <Save className="w-4 h-4" />
                <span>Save</span>
              </button>
            </div>
          </div>
          
          <div className="relative">
            <div className="absolute left-0 top-0 w-12 bg-gray-900 rounded-l-lg p-2 text-right text-xs text-gray-500 font-mono leading-6 max-h-96 overflow-hidden">
              {lines.map((_, index) => (
                <div
                  key={index}
                  className={`${
                    index === machineStatus.currentLine ? 'bg-blue-600 text-white px-1 rounded' : ''
                  }`}
                >
                  {index + 1}
                </div>
              ))}
            </div>
            
            <textarea
              value={gcode}
              onChange={(e) => setGcode(e.target.value)}
              className="w-full h-96 bg-gray-900 text-green-400 font-mono text-sm p-2 pl-16 rounded-lg border border-gray-700 focus:border-blue-500 focus:outline-none resize-none"
              style={{ lineHeight: '1.5rem' }}
            />
          </div>

          {/* Simulation Controls */}
          <div className="mt-4 flex items-center justify-between">
            <div className="flex space-x-2">
              <button
                onClick={handleRunProgram}
                disabled={machineStatus.state === 'running' || isSimulating}
                className="bg-green-600 hover:bg-green-700 disabled:bg-gray-600 disabled:cursor-not-allowed px-4 py-2 rounded-lg text-sm transition-colors flex items-center space-x-2"
              >
                <Play className="w-4 h-4" />
                <span>Simulate</span>
              </button>
              
              {machineStatus.state === 'running' && (
                <button
                  onClick={handlePauseProgram}
                  className="bg-yellow-600 hover:bg-yellow-700 px-4 py-2 rounded-lg text-sm transition-colors flex items-center space-x-2"
                >
                  <Pause className="w-4 h-4" />
                  <span>Pause</span>
                </button>
              )}
              
              {machineStatus.state === 'paused' && (
                <button
                  onClick={handleResumeProgram}
                  className="bg-green-600 hover:bg-green-700 px-4 py-2 rounded-lg text-sm transition-colors flex items-center space-x-2"
                >
                  <Play className="w-4 h-4" />
                  <span>Resume</span>
                </button>
              )}
              
              <button
                onClick={handleStopProgram}
                disabled={machineStatus.state === 'idle'}
                className="bg-red-600 hover:bg-red-700 disabled:bg-gray-600 disabled:cursor-not-allowed px-4 py-2 rounded-lg text-sm transition-colors flex items-center space-x-2"
              >
                <Square className="w-4 h-4" />
                <span>Stop</span>
              </button>
            </div>

            <div className="flex items-center space-x-3">
              <label className="text-sm text-gray-400">Speed:</label>
              <input
                type="range"
                min="10"
                max="1000"
                step="10"
                value={simulationSpeed}
                onChange={(e) => setSimulationSpeed(Number(e.target.value))}
                className="w-24"
              />
              <span className="text-sm text-gray-400 w-12">{simulationSpeed}ms</span>
            </div>
          </div>
        </div>
      </div>

      {/* Analysis Panel */}
      <div>
        <div className="bg-gray-800 rounded-lg p-6 mb-6">
          <h3 className="text-lg font-semibold mb-4 flex items-center">
            <RotateCcw className="w-4 h-4 mr-2 text-purple-400" />
            Simulation Status
          </h3>
          
          <div className="space-y-3 text-sm">
            <div className="flex justify-between">
              <span className="text-gray-400">Total Lines:</span>
              <span className="font-mono">{commands.length}</span>
            </div>
            
            <div className="flex justify-between">
              <span className="text-gray-400">Current Line:</span>
              <span className="font-mono">{machineStatus.currentLine + 1}</span>
            </div>
            
            <div className="flex justify-between">
              <span className="text-gray-400">Progress:</span>
              <span className="font-mono">{machineStatus.progress.toFixed(1)}%</span>
            </div>
            
            <div className="w-full bg-gray-700 rounded-full h-2">
              <div 
                className="bg-blue-500 h-2 rounded-full transition-all duration-300"
                style={{ width: `${machineStatus.progress}%` }}
              />
            </div>
            
            <div className="border-t border-gray-700 pt-3 mt-3">
              <div className="text-xs text-gray-500 mb-2">Current Position:</div>
              <div className="grid grid-cols-3 gap-2 text-xs">
                <div className="bg-gray-900 rounded p-2 text-center">
                  <div className="text-blue-400 font-bold">X</div>
                  <div className="font-mono">{machineStatus.position.x.toFixed(3)}</div>
                </div>
                <div className="bg-gray-900 rounded p-2 text-center">
                  <div className="text-green-400 font-bold">Y</div>
                  <div className="font-mono">{machineStatus.position.y.toFixed(3)}</div>
                </div>
                <div className="bg-gray-900 rounded p-2 text-center">
                  <div className="text-orange-400 font-bold">Z</div>
                  <div className="font-mono">{machineStatus.position.z.toFixed(3)}</div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Current Command */}
        <div className="bg-gray-800 rounded-lg p-6">
          <h3 className="text-lg font-semibold mb-4 text-green-400">Current Command</h3>
          
          <div className="bg-gray-900 rounded p-3 font-mono text-sm">
            {commands[machineStatus.currentLine]?.raw || 'No command'}
          </div>
          
          <div className="mt-3 text-xs text-gray-400">
            Line {machineStatus.currentLine + 1} of {commands.length}
          </div>
        </div>
      </div>
    </div>
  );
};

export default GCodeEditor;